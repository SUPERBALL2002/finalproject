import React, { useState } from "react";
import styles from "./NumberTarget.module.css";

const NumberTarget = () => {
  const [target, setTarget] = useState(generateTarget());
  const [numbers, setNumbers] = useState(generateNumbers());
  const [selectedNumbers, setSelectedNumbers] = useState([null, null]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [operation, setOperation] = useState("+"); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
  const [message, setMessage] = useState("");

  function generateTarget() {
    return Math.floor(Math.random() * 50) + 10; // ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 10-60
  }

  function generateNumbers() {
    return Array.from({ length: 6 }, () => Math.floor(Math.random() * 20) + 1); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-20
  }

  const handleNumberClick = (number) => {
    const newSelectedNumbers = [...selectedNumbers];

    // ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
    const emptyIndex = newSelectedNumbers.findIndex((num) => num === null);
    if (emptyIndex !== -1) {
      newSelectedNumbers[emptyIndex] = number;
      setSelectedNumbers(newSelectedNumbers);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö 2 ‡∏ï‡∏±‡∏ß
      if (newSelectedNumbers[0] !== null && newSelectedNumbers[1] !== null) {
        let result;
        switch (operation) {
          case "+":
            result = newSelectedNumbers[0] + newSelectedNumbers[1];
            break;
          case "-":
            result = newSelectedNumbers[0] - newSelectedNumbers[1];
            break;
          case "*":
            result = newSelectedNumbers[0] * newSelectedNumbers[1];
            break;
          case "/":
            result = newSelectedNumbers[1] !== 0 ? newSelectedNumbers[0] / newSelectedNumbers[1] : null;
            break;
          default:
            result = null;
        }

        if (result === target) {
          setMessage("üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!");
        } else {
          setMessage("‚ùå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
        }
      }
    }
  };

  const resetGame = () => {
    setTarget(generateTarget());
    setNumbers(generateNumbers());
    setSelectedNumbers([null, null]);
    setOperation("+");
    setMessage("");
  };

  return (
    <div className={styles.numberTargetContainer}>
      <div className={styles.numberTargetBgMain}></div>
      <h1>üéØ ‡πÄ‡∏Å‡∏° Number Target</h1>
      <p>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: <strong>{target}</strong></p>

      {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô */}
      <div className={styles.numberTargetHowto}>
        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì<br />
        ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô<br />
        (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö */}
      <div className={styles.answerContainer}>
        <div className={styles.answerBox}>{selectedNumbers[0] ?? "_"}</div>
        <div className={styles.operator}>{operation}</div>
        <div className={styles.answerBox}>{selectedNumbers[1] ?? "_"}</div>
        <div className={styles.operator}>=</div>
        <div className={styles.answerBox}>{target}</div>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ */}
      <div className={styles.operationContainer}>
        <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: </label>
        <select value={operation} onChange={(e) => setOperation(e.target.value)}>
          <option value="+">‡∏ö‡∏ß‡∏Å</option>
          <option value="-">‡∏•‡∏ö</option>
          <option value="*">‡∏Ñ‡∏π‡∏ì</option>
          <option value="/">‡∏´‡∏≤‡∏£</option>
        </select>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ */}
      <div className={styles.numberTargetNumbersContainer}>
        {numbers.map((number, index) => (
          <button
            key={index}
            className={styles.numberTargetButton}
            onClick={() => handleNumberClick(number)}
            disabled={selectedNumbers.includes(number)}
          >
            {number}
          </button>
        ))}
      </div>

      <p>{message}</p>
      <button className={styles.numberTargetResetButton} onClick={resetGame}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>
    </div>
  );
};

export default NumberTarget;